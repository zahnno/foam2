p({"class":"foam.nanos.cron.Cron","minute":1,"hour":-1,"dayOfMonth":-1,"month":-1,"dayOfWeek":-1,"scheduledTime":"2017-11-03T15:01:00.0Z","id":"sessionExpiry","description":"Remove expired sessions.","lastRun":"2017-11-03T14:21:09.231Z","server":true,"scheduled":false,"code":"EXPIRY_AGE = 8*3600*1000; /* 8 hours */ dao = x.get(\"localSessionDAO\");\ndao.where(foam.mlang.MLang.LT(foam.nanos.session.Session.LAST_USED, new Date(System.currentTimeMillis()-EXPIRY_AGE))).removeAll();","output":"","notes":"","enabled":true})
p({"class":"foam.nanos.cron.Cron","minute":0,"hour":1,"dayOfMonth":-1,"month":-1,"dayOfWeek":-1,"scheduledTime":"2018-06-01T05:00:00.0Z","enabled":false,"id":"expired notification","description":"remove expired notifications","lastRun":null,"lastDuration":0,"server":true,"status":1,"code":"import foam.nanos.cron.RemoveExpiredNotificationCronjob;\ncron = new RemoveExpiredNotificationCronjob();\ncron.execute(x);\nprint(\"s\");","output":"","notes":""})
p({"class":"foam.nanos.cron.Cron","minute":0,"enabled":true,"id":"Renew rule history cron","description":"Cron for renewing rule history - run every hour.","scheduled":false,"code":"import foam.nanos.ruler.cron.RenewRuleHistoryCron; \ncron = new RenewRuleHistoryCron();\ncron.execute(x);\nprint(\"done\");"})
p({"class":"foam.nanos.cron.Cron","id":"PMInfoRollup","scheduledTime":"2019-04-28T05:39:00.000Z","lastRun":"2019-04-28T05:38:00.802Z","code":"import foam.dao.DAO;\nimport foam.nanos.logger.Logger;\nimport foam.nanos.pm.PM;\nimport foam.nanos.pm.PMInfo;\nimport foam.nanos.pm.DAOPMLoggerCopySink;\nimport foam.nanos.script.Script;\n\nscriptName = \"PMInfoRollup\";\npm = new PM(Script.class, \"scriptName\");\nlogger = x.get(\"logger\");\nlogger.info(new String[] {scriptName, \"start\"});\n\n// current 1 minute dao\ndao = x.get(\"pmInfoDAO\").getDelegate();\n\n// replace with new empty dao\nx.get(\"pmInfoDAO\").setDelegate(new foam.dao.MDAO(foam.nanos.pm.PMInfo.getOwnClassInfo()));\n\n/*\none = x.get(\"pmInfo1minDAO\");\nfive = x.get(\"pmInfo5minDAO\");\nhour = x.get(\"pmInfo1hourDAO\");\nday = x.get(\"pmInfo1dayDAO\");\n\nlogger.info(new String[] {scriptName, \"daos\", one.toString(), five.toString(), hour.toString(), day.toString()});\nlogger.info(new String[] {scriptName, \"current replaced\"});\n\n// move previous 1 minute to named 1 minute dao\none.setDelegate(dao);\n\n// cleanup\nnow = java.time.LocalDateTime.now();\n\n// if at 5 minute interval of hour clear 5 minute dao\nif ( now.getMinute() % 5 == 0 ) {\n  five.removeAll();\n  logger.info(new String[] {scriptName,\"clean 5 minute\"});\n}  \n\n// if at top of the hour, clear hour dao, if start of day.\nif ( now.getMinute() == 0 ) {\n  hour.removeAll();\n  logger.info(new String[] {scriptName,\"clean 1 hour\"});\n  if ( now.getHour() == 0 ) {\n    day.removeAll();\n    logger.info(new String[] {scriptName,\"clean 1 day\"});\n  }\n}\n\n// put 1 minute entries into other daos.\nDAO[] daos = new DAO[] { five, hour, day };\ndao.select(new DAOPMLoggerCopySink(x, daos));\n*/\nlogger.info(new String[] {scriptName,\"end\"});\npm.log(x);\n","output":""})
p({"class":"foam.nanos.cron.Cron","minute":0,"id":"PMHourlyReduce","enabled":false,"code":"rm = x.get(\"pmHourlyReduceManager\");\nrm.doReduce();"})
p({"class":"foam.nanos.cron.Cron","hour":0,"id":"PMDailyReduce","enabled":false,"code":"rm = x.get(\"pmDailyReduceManager\");\nrm.doReduce();"})
p({"class":"foam.nanos.cron.Cron","enabled":true,"id":"PmReduceManager","code":"import foam.nanos.logger.Logger;\n\nscriptName = \"PMReduceManager\";\nlogger = x.get(\"logger\");\ndailyRM = x.get(\"pmDailyReduceManager\");\nhourlyRM = x.get(\"pmHourlyReduceManager\");\nnow = java.time.LocalDateTime.now();\n\nif (now.getHour() == 0) {\n  hourlyRM.doReduce();\n  dailyRM.doReduce();\n  logger.info(new String[] {scriptName, \"Daily PM Reduce Complete\"});\n} else if (now.getMinute() == 0){\n  hourlyRM.doReduce();\n  logger.info(new String[] {scriptName, \"Hourly PM Reduce Complete\"});\n}\n"})
